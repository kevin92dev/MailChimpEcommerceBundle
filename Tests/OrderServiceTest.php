<?php
/*
 * This file is part of the MailChimpEcommerceBundle package.
 *
 * Copyright (c) 2017 kevin92dev.es
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 *
 * Feel free to edit as you please, and have fun.
 *
 * @author Kevin Murillo <kevin92dev@gmail.com>
 */

namespace MailChimpEcommerceBundle\Tests;

use MailChimpEcommerceBundle\RequestTypes;
use MailChimpEcommerceBundle\Services\OrderService;
use PHPUnit_Framework_TestCase;

class OrderServiceTest extends PHPUnit_Framework_TestCase
{
    private $mailChimpStub;
    private $orderExt;
    private $mcOrder;
    private $mcOrderLine;
    private $mcProduct;
    private $mcProductVariant;
    private $mcCustomer;
    private $mcAddress;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->mailChimpStub = $this
            ->getMockBuilder('\MailChimpEcommerceBundle\Services\MailChimp')
            ->disableOriginalConstructor()
            ->getMock();
        $this->orderExt = $this
            ->getMockBuilder('\MarketplaceBundle\Entity\OrderExt')
            ->getMock();
        $this->mcOrder = $this
            ->getMockBuilder('\MailChimpEcommerceBundle\Entities\Order')
            ->getMock();
        $this->mcOrderLine = $this
            ->getMockBuilder('\MailChimpEcommerceBundle\Entities\OrderLine')
            ->getMock();
        $this->mcProduct = $this
            ->getMockBuilder('\MailChimpEcommerceBundle\Entities\Product')
            ->getMock();
        $this->mcProductVariant = $this
            ->getMockBuilder('\MailChimpEcommerceBundle\Entities\ProductVariant')
            ->getMock();
        $this->mcCustomer = $this
            ->getMockBuilder('\MailChimpEcommerceBundle\Entities\Customer')
            ->getMock();
        $this->mcAddress = $this
            ->getMockBuilder('\MailChimpEcommerceBundle\Entities\Address')
            ->getMock();
    }

    public function testSendOrderToMailChimpSuccess()
    {
        $method = RequestTypes::$POST;
        $resource = '/orders';
        $body = [
            'landing_site' => "landing_site",
            'financial_status' => "processing",
            'fulfillment_status' => "",
            'currency_code' => "EUR",
            'order_total' => 21,
            'tax_total' => 4.48,
            'shipping_total' => 0,
            'tracking_code' => "prec",
            'processed_at_foreign' => "",
            'cancelled_at_foreign' => "",
            'updated_at_foreign' => "",
            'id' => "1234",
            'campaign_id' => "",
            'customer' => [
                'id' => "50",
                'email_address' => "kevin92dev@gmail.com",
                'opt_in_status' => true,
                'company' => "",
                'first_name' => "Kevin",
                'last_name' => "Murillo",
                'orders_count' => 5,
                'total_spent' => 50.75,
                'address' => [
                    'address1' => "Av. Test nº 92",
                    'address2' => "",
                    'city' => "Barcelona",
                    'province' => "Barcelona",
                    'province_code' => "BCN",
                    'postal_code' => "08080",
                    'country' => "Spain",
                    'country_code' => "ESP",
                ]
            ],
            'shipping_address' => [
                'name' => "shipping_address address for johndoe@mascoteros.com",
                'address1' => "Av. Test nº 92",
                'address2' => "",
                'city' => "Barcelona",
                'province' => "Barcelona",
                'province_code' => "BCN",
                'postal_code' => "08080",
                'country' => "Spain",
                'country_code' => "ESP",
            ],
            'billing_address' => [
                'name' => "billing_address address for johndoe@mascoteros.com",
                'address1' => "Av. Test nº 92",
                'address2' => "",
                'city' => "Barcelona",
                'province' => "Barcelona",
                'province_code' => "BCN",
                'postal_code' => "08080",
                'country' => "Spain",
                'country_code' => "ESP",
            ]
        ];

        // Create mocks
        $this->setCustomerMock();
        $this->setAddressMock();
        $this->setOrderMock($this->mcCustomer, $this->mcAddress);

        // Check that doRequest call have the right params
        $this->mailChimpStub
            ->expects($this->once())
            ->method('doRequest')
            ->with(
                $method,
                $body,
                $resource
            );

        // Call method to test
        $orderService = new OrderService($this->mailChimpStub);
        $orderService->create($this->mcOrder);
    }

    private function setOrderMock($customerMock, $addressMock)
    {
        $this->setOrderLineMock();

        $array = [
            'getId' => 1234,
            'getCampaignId' => '',
            'getLandingSite' => 'landing_site',
            'getFinancialStatus' => 'processing',
            'getFulfillmentStatus' => '',
            'getCurrencyCode' => 'EUR',
            'getOrderTotal' => 21,
            'getTaxTotal' => '4.48',
            'getShippingTotal' => '0',
            'getTrackingCode' => 'prec',
            'getProcessedAtForeign' => '',
            'getCancelledAtForeign' => '',
            'getUpdatedAtForeign' => '',
            'getCustomer' => $customerMock,
            'getShippingAddress' => $addressMock,
            'getBillingAddress' => $addressMock,
            'getOrderLines' => $this->mcOrderLine,
        ];

        foreach ($array as $method => $value) {
            $this->mcOrder
                ->expects($this->any())
                ->method($method)
                ->will($this->returnValue($value));
        }
    }

    private function setOrderLineMock()
    {
        $this->setProductMock();
        $this->setProductVariantMock();

        $array = [
            'getId' => 1234,
            'getProduct' => $this->mcProduct,
            'getProductVariant' => $this->mcProductVariant,
            'getQuantity' => 2,
            'getPrice' => 10.50,
        ];

        foreach ($array as $method => $value) {
            $this->mcOrderLine
                ->expects($this->any())
                ->method($method)
                ->will($this->returnValue($value));
        }
    }

    private function setProductMock()
    {
        $array = [
            'getId' => 567
        ];

        foreach ($array as $method => $value) {
            $this->mcProduct
                ->expects($this->any())
                ->method($method)
                ->will($this->returnValue($value));
        }
    }

    private function setProductVariantMock()
    {
        $array = [
            'getId' => 567,
        ];

        foreach ($array as $method => $value) {
            $this->mcProductVariant
                ->expects($this->any())
                ->method($method)
                ->will($this->returnValue($value));
        }
    }

    private function setCustomerMock()
    {
        $array = [
            'getId' => 50,
            'getEmail' => 'kevin92dev@gmail.com',
            'isOptInStatus' => true,
            'getCompany' => '',
            'getFirstname' => 'Kevin',
            'getLastname' => 'Murillo',
            'getOrdersCount' => 5,
            'getTotalSpent' => 50.75,
            'getAddress' => $this->mcAddress,
        ];

        foreach ($array as $method => $value) {
            $this->mcCustomer
                ->expects($this->any())
                ->method($method)
                ->will($this->returnValue($value));
        }
    }

    private function setAddressMock()
    {
        $array = [
            'getAddress1' => 'Av. Test nº 92',
            'getAddress2' => '',
            'getCity' => 'Barcelona',
            'getProvince' => 'Barcelona',
            'getProvinceCode' => 'BCN',
            'getPostalCode' => '08080',
            'getCountry' => 'Spain',
            'getCountryCode' => 'ESP',
        ];

        foreach ($array as $method => $value) {
            $this->mcAddress
                ->expects($this->any())
                ->method($method)
                ->will($this->returnValue($value));
        }
    }
}
